import streamlit as st

st.set_page_config(layout="wide")

from streamlit_autorefresh import st_autorefresh
import threading
from azure_client import AzureSpeechClient


st_autorefresh(interval=1000, limit=1000, key="refresh")

# ----------------- –°—Ç–∏–ª–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã -----------------
hide_streamlit_style = """
    <style>
        #root > div:nth-child(1) > div > div > div > div > section > div {padding-top: 0;}
        header {visibility: hidden;}
    </style>
"""
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

custom_css = """
    <style>
    .block-container {
        padding-top: 0rem;
        padding-bottom: 0rem;
    }
    .main {
        padding: 0;
    }
    </style>
"""
st.markdown(custom_css, unsafe_allow_html=True)

# ----------------- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -----------------
st.markdown(
    "<h1 style='text-align: center;'>–î–ï–ú–û–ù–°–¢–ê–†–¶–ò–Ø SPEECH2TEXT –∏ TEXT2SPEECH</h1>",
    unsafe_allow_html=True
)

# ----------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state -----------------
if "azure_client" not in st.session_state:
    st.session_state.azure_client = AzureSpeechClient()

if "current_lang" not in st.session_state:
    st.session_state.current_lang = "ru-RU"

if "selected_voice" not in st.session_state:
    st.session_state.selected_voice = "ru-RU-DmitryNeural"

if "rate_value" not in st.session_state:
    st.session_state.rate_value = 20
if "pitch_value" not in st.session_state:
    st.session_state.pitch_value = 0
if "volume_value" not in st.session_state:
    st.session_state.volume_value = "medium"
if "emphasis_value" not in st.session_state:
    st.session_state.emphasis_value = "moderate"
if "accent_value" not in st.session_state:
    st.session_state.accent_value = "none"

# –ü–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏
if "console_output" not in st.session_state:
    default_settings = (
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n"
        f"    –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π\n"
        f"    –ì–æ–ª–æ—Å: –î–º–∏—Ç—Ä–∏–π\n"
        f"    –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏: 20%\n"
        f"    –í—ã—Å–æ—Ç–∞ —Ç–æ–Ω–∞: 0%\n"
        f"    –ì—Ä–æ–º–∫–æ—Å—Ç—å: –°—Ä–µ–¥–Ω—è—è\n"
        f"    –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è: –£–º–µ—Ä–µ–Ω–Ω–æ–µ\n"
        f"    –ê–∫—Ü–µ–Ω—Ç: –ù–µ—Ç\n\n"
    )
    st.session_state.console_output = default_settings

# ----------------- –§—É–Ω–∫—Ü–∏–∏ -----------------
def toggle_microphone():
    """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –ø–∏—à–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å."""
    client = st.session_state.azure_client
    if client.is_listening:
        client.stop_continuous_recognition()
        st.session_state.console_output += "–ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω.\n"
    else:
        client.start_continuous_recognition()
        st.session_state.console_output += "–ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á—ë–Ω. –ì–æ–≤–æ—Ä–∏—Ç–µ...\n"

def manual_speak(text: str):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, –º–∏–Ω—É—è –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞.
    """
    client = st.session_state.azure_client

    def _speak():
        ssml = client._build_ssml(text)
        client.speaking = True
        result = client.synthesizer.speak_ssml_async(ssml).get()
        client.speaking = False
    threading.Thread(target=_speak, daemon=True).start()


def process_input(text: str):
    """
    –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å —É—á—ë—Ç–æ–º –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞:
    - –ï—Å–ª–∏ response_mode = "endpoint", —Ç–æ –±–µ—Ä—ë–º –æ—Ç–≤–µ—Ç –∏–∑ API –∏ –æ–∑–≤—É—á–∏–≤–∞–µ–º –µ–≥–æ
    - –ï—Å–ª–∏ response_mode = "repeat", —Ç–æ –æ–∑–≤—É—á–∏–≤–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    st.session_state.console_output += f"–ü–æ–ª—É—á–µ–Ω–Ω–æ –Ω–∞ –≤–≤–æ–¥: {text}\n"

    client = st.session_state.azure_client

    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ ¬´–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–±–∏–≤–∞—Ç—å¬ª (interrupt_enabled) –∏ —Å–µ–π—á–∞—Å –∏–¥—ë—Ç –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ, –ø—Ä–µ—Ä—ã–≤–∞–µ–º:
    if client.interrupt_enabled and client.speaking:
        client.interrupt_speech()

    if client.response_mode == "endpoint":
        answer = client.get_answer_from_api(text)
        if answer:
            st.session_state.console_output += f"–û—Ç–≤–µ—Ç –æ—Ç endpoint: {answer}\n"

            if client.is_listening:
                client.speak_text(answer)
            else:
                manual_speak(answer)
        else:
            st.session_state.console_output += "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç API.\n"
    else:
        # –ò–Ω–∞—á–µ (—Ä–µ–∂–∏–º repeat) –æ–∑–≤—É—á–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ñ—Ä–∞–∑—É
        if client.is_listening:
            client.speak_text(text)
        else:
            manual_speak(text)


# ----------------- –†–∞–∑–º–µ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ -----------------
col_mid, col_right = st.columns([2, 1], gap="large")

# ---------- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (–û—Å–Ω–æ–≤–Ω–∞—è) ----------
with col_mid:
    st.markdown("### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å")
    st.text_area(
        label="–≥–∞–≥–∞–≥–∞",
        value=st.session_state.console_output,
        height=700,
        key="console_area",
        label_visibility="collapsed"
    )

    st.markdown("---")

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∏ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
    row_col1, row_col2, row_col3 = st.columns([5, 2, 1])
    with row_col1:
        user_input = st.text_input(
            label="–≥–∞–≥–∞–≥–∞",
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏...",
            label_visibility="collapsed"
        )
    with row_col2:
        send_clicked = st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", key="send_btn")
    with row_col3:
        mic_clicked = st.button("üé§", key="mic_btn")

    if send_clicked:
        send_text_to_speech(user_input)
    if mic_clicked:
        toggle_microphone()

    if st.session_state.azure_client.is_listening:
        st.success("–°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ.")

# ---------- –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞) ----------
with col_right:
    st.markdown(
        """
        <style>
        div.stButton > button {
            width: 100% !important;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    st.write("##### –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:")
    flag_col1, flag_col2 = st.columns(2)
    if flag_col1.button("–†—É—Å—Å–∫–∏–π", key="lang_ru"):
        st.session_state.console_output += "–°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π\n"
        st.session_state.azure_client.set_language("ru-RU")
        st.session_state.current_lang = "ru-RU"
    if flag_col2.button("–ö–∞–∑–∞—Ö—Å–∫–∏–π", key="lang_kz"):
        st.session_state.console_output += "–°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π\n"
        st.session_state.azure_client.set_language("kk-KZ")
        st.session_state.current_lang = "kk-KZ"

    st.write("##### –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å:")
    if st.session_state.current_lang == "ru-RU":
        col1, col2, col3 = st.columns(3)
        if col1.button("–î–º–∏—Ç—Ä–∏–π", key="voice_dmitry"):
            st.session_state.console_output += "–í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: –î–º–∏—Ç—Ä–∏–π\n"
            st.session_state.selected_voice = "ru-RU-DmitryNeural"
            st.session_state.azure_client.set_voice("ru-RU-DmitryNeural")
        if col2.button("–°–≤–µ—Ç–ª–∞–Ω–∞", key="voice_svetlana"):
            st.session_state.console_output += "–í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: –°–≤–µ—Ç–ª–∞–Ω–∞\n"
            st.session_state.selected_voice = "ru-RU-SvetlanaNeural"
            st.session_state.azure_client.set_voice("ru-RU-SvetlanaNeural")
        if col3.button("–î–∞—Ä—å—è", key="voice_dariya"):
            st.session_state.console_output += "–í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: –î–∞—Ä—å—è\n"
            st.session_state.selected_voice = "ru-RU-DariyaNeural"
            st.session_state.azure_client.set_voice("ru-RU-DariyaNeural")
    elif st.session_state.current_lang == "kk-KZ":
        col1, col2 = st.columns(2)
        if col1.button("–ê–π–≥—É–ª—å", key="voice_aigul"):
            st.session_state.console_output += "–í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: –ê–π–≥—É–ª—å\n"
            st.session_state.selected_voice = "kk-KZ-AigulNeural"
            st.session_state.azure_client.set_voice("kk-KZ-AigulNeural")
        if col2.button("–î–∞—É–ª–µ—Ç", key="voice_daulet"):
            st.session_state.console_output += "–í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: –î–∞—É–ª–µ—Ç\n"
            st.session_state.selected_voice = "kk-KZ-DauletNeural"
            st.session_state.azure_client.set_voice("kk-KZ-DauletNeural")

    st.markdown(
        "<h5 style='font-size:20px; margin-bottom:-75px;'>–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ (%):</h5>",
        unsafe_allow_html=True
    )
    st.slider("–≥–∞–≥–∞–≥–∞", -50, 50, key="rate_value", step=10, label_visibility="collapsed")

    st.markdown(
        "<h5 style='font-size:20px; margin-bottom:-75px;'>–í—ã—Å–æ—Ç–∞ —Ç–æ–Ω–∞ (%):</h5>",
        unsafe_allow_html=True
    )
    st.slider("–≥–∞–≥–∞–≥–∞", -20, 20, key="pitch_value", step=5, label_visibility="collapsed")

    st.write("##### –£—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏:")
    col_soft, col_medium, col_loud = st.columns(3)
    if col_soft.button("–¢–∏—Ö–∏–π", key="vol_soft"):
        st.session_state.console_output += "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä–æ–º–∫–æ—Å—Ç—å: —Ç–∏—Ö–∏–π\n"
        st.session_state.volume_value = "soft"
    if col_medium.button("–°—Ä–µ–¥–Ω–∏–π", key="vol_medium"):
        st.session_state.console_output += "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä–æ–º–∫–æ—Å—Ç—å: —Å—Ä–µ–¥–Ω–∏–π\n"
        st.session_state.volume_value = "medium"
    if col_loud.button("–ì—Ä–æ–º–∫–∏–π", key="vol_loud"):
        st.session_state.console_output += "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä–æ–º–∫–æ—Å—Ç—å: –≥—Ä–æ–º–∫–∏–π\n"
        st.session_state.volume_value = "loud"

    st.write("##### –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è:")
    emph_cols = st.columns(4)
    if emph_cols[0].button("–ù–µ—Ç", key="emph_none"):
        st.session_state.console_output += "–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è: –Ω–µ—Ç\n"
        st.session_state.emphasis_value = "none"
    if emph_cols[1].button("–ù–µ–±–æ–ª—å—à–æ–µ", key="emph_reduced"):
        st.session_state.console_output += "–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è: –Ω–µ–±–æ–ª—å—à–æ–µ\n"
        st.session_state.emphasis_value = "reduced"
    if emph_cols[2].button("–£–º–µ—Ä–µ–Ω–Ω–æ–µ", key="emph_moderate"):
        st.session_state.console_output += "–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è: —É–º–µ—Ä–µ–Ω–Ω–æ–µ\n"
        st.session_state.emphasis_value = "moderate"
    if emph_cols[3].button("–°–∏–ª—å–Ω–æ–µ", key="emph_strong"):
        st.session_state.console_output += "–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è: —Å–∏–ª—å–Ω–æ–µ\n"
        st.session_state.emphasis_value = "strong"

    st.markdown("##### –£—Ä–æ–≤–Ω–∏ –∞–∫—Ü–µ–Ω—Ç–∞:")
    accent_cols = st.columns(4)
    if accent_cols[0].button("–ù–µ—Ç", key="accent_none"):
        st.session_state.console_output += "–ê–∫—Ü–µ–Ω—Ç: –Ω–µ—Ç\n"
        st.session_state.accent_value = "none"
    if accent_cols[1].button("–ù–µ–±–æ–ª—å—à–æ–µ", key="accent_reduced"):
        st.session_state.console_output += "–ê–∫—Ü–µ–Ω—Ç: –Ω–µ–±–æ–ª—å—à–æ–µ\n"
        st.session_state.accent_value = "reduced"
    if accent_cols[2].button("–£–º–µ—Ä–µ–Ω–Ω–æ–µ", key="accent_moderate"):
        st.session_state.console_output += "–ê–∫—Ü–µ–Ω—Ç: —É–º–µ—Ä–µ–Ω–Ω–æ–µ\n"
        st.session_state.accent_value = "moderate"
    if accent_cols[3].button("–°–∏–ª—å–Ω–æ–µ", key="accent_strong"):
        st.session_state.console_output += "–ê–∫—Ü–µ–Ω—Ç: —Å–∏–ª—å–Ω–æ–µ\n"
        st.session_state.accent_value = "strong"

    st.markdown("##### –ò—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç–≤–µ—Ç–∞:")
    col_source1, col_source2 = st.columns(2)
    if col_source1.button("Endpoint HCB", key="source_endpoint"):
        st.session_state.console_output += "–ò—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç–≤–µ—Ç–∞: Endpoint HCB\n"
        st.session_state.azure_client.response_mode = "endpoint"
    if col_source2.button("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —É—Å–ª—ã—à–∞–Ω–Ω–æ–≥–æ", key="source_repeat"):
        st.session_state.console_output += "–ò—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç–≤–µ—Ç–∞: –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —É—Å–ª—ã—à–∞–Ω–Ω–æ–≥–æ\n"
        st.session_state.azure_client.response_mode = "repeat"

    st.markdown("##### –ü–µ—Ä–µ–±–∏–≤–∞–Ω–∏–µ –±–æ—Ç–∞:")
    col_int1, col_int2 = st.columns(2)
    if col_int1.button("–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–±–∏–≤–∞—Ç—å", key="interrupt_enabled"):
        st.session_state.console_output += "–ü–µ—Ä–µ–±–∏–≤–∞–Ω–∏–µ: –º–æ–∂–Ω–æ\n"
        st.session_state.azure_client.interrupt_enabled = True
    if col_int2.button("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–±–∏–≤–∞—Ç—å", key="interrupt_disabled"):
        st.session_state.console_output += "–ü–µ—Ä–µ–±–∏–≤–∞–Ω–∏–µ: –Ω–µ–ª—å–∑—è\n"
        st.session_state.azure_client.interrupt_enabled = False

    st.session_state.azure_client.set_synthesis_params(
        rate=st.session_state.rate_value,
        pitch=st.session_state.pitch_value,
        volume=st.session_state.volume_value,
        emphasis=st.session_state.emphasis_value,
        accent=st.session_state.accent_value
    )
